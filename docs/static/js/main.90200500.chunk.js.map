{"version":3,"sources":["components/AddCategory.js","components/helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","gefGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","setTimeout","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACRC,mBAAS,IADD,mBACrCC,EADqC,KACzBC,EADyB,KAe5C,OACI,0BAAMC,SAXS,SAACC,GAChBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAE9BR,GAAc,SAAAS,GAAI,OAAGP,GAAH,mBAAkBO,OACpCN,EAAc,OAOV,2BACIO,KAAK,OACLC,MAAOT,EACPU,SAlBY,SAACP,GACrBF,EAAcE,EAAEQ,OAAOF,Y,uBCLlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,8DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EACxB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAYRM,GAZQ,4CAAH,sDCAb,IAAMO,EAAc,SAAC,GAAiB,IAAhBH,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAE/B,OACI,yBAAKc,UAAU,8CACX,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAIA,KCFHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECDxB,SAAsBA,GAAW,IAAD,EACjBd,mBAAS,CAC/BqB,KAAK,GACLa,SAAS,IAH8B,mBACpCC,EADoC,KAC7BC,EAD6B,KAgB3C,OAXAC,qBAAU,WACNxB,EAAQC,GACPwB,MAAK,SAAAC,GACFC,YAAW,WACPJ,EAAS,CACLf,KAAKkB,EACLL,SAAQ,MAEb,UAET,CAACpB,IACIqB,EDXuBM,CAAc3B,GAAhCa,EAJuB,EAI5BN,KAAYa,EAJgB,EAIhBA,QAEnB,OAEI,oCACI,wBAAIJ,UAAU,yCAAyChB,GACtDoB,GAAW,uBAAGJ,UAAU,oCAAb,cACZ,yBAAKA,UAAU,aAEHH,EAAOJ,KAAI,SAAAC,GAAG,OACd,kBAAC,EAAD,eACIkB,IAAKlB,EAAIC,IACLD,UEjBnBmB,EAAe,WAAO,IAAD,EACM3C,mBAAS,CAAC,WADhB,mBACvB4C,EADuB,KACX7C,EADW,KAK9B,OAEI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACA,4BAEQ6C,EAAWrB,KAAI,SAAAT,GAAQ,OAGnB,kBAAC,EAAD,CACA4B,IAAK5B,EACLA,SAAYA,UChBpC+B,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.90200500.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\n\nexport const AddCategory = ({setCategories}) => {\n    const [inputValue, setinputValue] = useState('');\n    const handleInputChange=(e)=>{\n        setinputValue(e.target.value);\n    }\n    const handleSubmit=(e)=>{\n        e.preventDefault();\n        if(inputValue.trim().length > 2){\n            //console.log('submit hecho')\n        setCategories(cats=>[inputValue, ...cats ]);\n        setinputValue('');\n        }\n        \n        \n    }\n    return (\n        <form onSubmit={handleSubmit}>\n            <input\n                type=\"text\" \n                value={inputValue}\n                onChange={handleInputChange}\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","\n\nexport const gefGifs = async(category) =>{\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=5&api_key=YDZBkVFv7LoAaZZGhofJihDhjQhDcYOz`\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n\n    const gifs = data.map(img =>{\n        return{\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n        return gifs;\n    //console.log(gifs)\n    //setimages(gifs);\n}","import React from 'react'\n//recibe una imagen\nexport const GifGridItem = ({title,url}) => {\n    //console.log(title,url);\n    return (\n        <div className=\"card animate__animated animate__fadeInLeft\">\n            <img src={url} alt={title}/>\n            <p>{title}</p>\n            {/*img.title*/}\n        </div>\n    )\n}\n","import React from 'react'\nimport useFetchGifs from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n//import { gefGifs } from './helpers/getGifs';\n//category es el argumento que voy a recibir\nexport const GifGrid = ({category}) => {\n    //ejmeplo de un contador\n    //const [count, setcount] = useState(0)\n    // const [images, setimages] = useState([]);\n    const {data:images,loading} = useFetchGifs (category);\n\n    return (\n        //fragment retorno mas de dos\n        <>\n            <h3 className=\"animate__animated animate__fadeInLeft\">{category}</h3>\n            {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\n            <div className=\"card-grid\">\n                    {\n                        images.map(img => (\n                        <GifGridItem\n                            key={img.id}\n                            {...img} \n                        />\n                        ))\n                    }\n            </div>\n        </>\n    )\n}\n","import { useState, useEffect } from 'react';\nimport { gefGifs } from '../components/helpers/getGifs';\n\n//Hooks\nexport default function useFetchGifs(category) {\n    const [state, setstate] = useState({\n        data:[],\n        loading: true\n    });\n    useEffect(()=>{\n        gefGifs(category)\n        .then(imgs => {\n            setTimeout(() => {\n                setstate({\n                    data:imgs,\n                    loading:false\n                });\n            }, 3000);\n        })\n    },[category])\n    return state;\n}\n","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory'\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n    const [categories, setCategories] = useState(['Heroes']);\n    // const handleAdd = ()=>{\n    //     setCategories([...categories, 'Kyra'])\n    \n    return (\n        // Fragment\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setCategories}/>\n            <hr />\n            <ol>\n                {\n                    categories.map(category =>(\n                        //return<li key={category}>{category}</li>\n                        //<li key={category}>{category}</li>\n                        <GifGrid\n                        key={category} \n                        category = {category} />\n                    ))\n                    \n                    \n                }\n            </ol>\n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport { GifExpertApp } from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}